3주차 pandas 기초
1. pandas
	NumPy, SciPy, statmodel 등 다른 모듈과 함께 쓰이기도 함
	for문 등 반복문 없이 같은 작업을 여러 번 반복할 수 있음
	표, 다른 종류로 이루어진 데이터를 다루기에 적합함
2. 데이터 구조
	1) 시리즈Series
		(1) 소개
			일차원 객체 (반복과 순서가 있는 데이터)
			인덱스: 같은 데이터타입의 값을 나열, 각각의 값에 레이블을 붙인 것
			시리즈를 호출하면 인덱스와 값 순으로 나타남
		(2) 생성
			pd.Series 함수와 값이 될 데이터를 넣으면 생성됨
			사전 형식으로 인덱스와 값을 동시에 지정할 수 있음 (to_dict 메소드로 시리즈를 사전으로 만들 수도 있음)
			이미 있는 데이터를 값과 인덱스로 결합할 수 있음
			name 기능으로 시리즈 자체와 인덱스에 이름을 붙여줄 수 있음
		(3) 인덱스
			0에서 시작하는 인덱스가 아닌 다른 타입, 다른 내용으로 지정할 수 있음 (중복 가능, 이미 생성된 시리즈의 인덱스도 수정 가능)
			데이터프레임에서는 행과 열 모두 인덱스 존재
			이용해 특정 값을 불러오거나 수정할 수 있음 (NumPy 기능 -ex: np.array- 사용 가능)
			인덱스 자체를 객체처럼 활용할 수 있음 (인덱스 메소드 존재)
			in_unique를 통해 고유한 이름을 가졌는지 확인 가능
			중복된 인덱스를 가져도 인덱싱 가능 (하나만 나올 거 여러 개 나오는 차이)
		(4) 기능
			특정 조건을 만족하는 행만 불러오기
			각 행에 같은 작업 반복 (NumPy와 같음)
			in 연산자로 특정 인덱스가 시리즈 안에 있는지 확인
			시리즈 안의 값(array)과 인덱스(index)에 대한 정보 확인
	2) 데이터프레임DataFrame
		(1) 소개
			다차원 객체 (행과 열을 가짐) - to_numpy 메소드를 통해 ndarray로 만들 수 있음
		(2) 생성
			pd.DataFrame 함수와 값이 될 데이터를 넣으면 생성됨
			사전 형식 데이터 (열의 이름: 각 행의 값 or 열의 이름: {인덱스: 해당 칸의 값})
			행과 열 자체에도 이름을 지정할 수 있음
		(3) 수정
			열의 순서를 다시 지정할 수 있음 (시리즈의 인덱스와 같은 형식)
			각 열을 수정할 때 인덱스를 일치시켜야 함
		(4) 기능
			데이터프레임 안의 행(index)과 열(columns)에 대한 정보 확인
			head와 tail 메소드로 표의 가장 앞 5행, 뒤 5행만 볼 수 있음
			del을 통해 열 제거 가능
			T를 통해 행과 열을 전환할 수 있음
3. 기능
	1) 리인덱싱
		reindex를 이용해 데이터를 재정렬
		기본 설정은 행이지만 columns를 지정해 열을 리인덱싱 할 수 있음 (columns = ㅁ or axis = "columns" or axis=1)
		규칙적인 (시계열) 데이터의 경우 method="ffill"과 같이 지정해주면 빈 부분이 채워짐
	2) 삭제 - drop: 지정한 축을 삭제 (여러 축 가능)
	3) 인덱싱과 슬라이싱
		인덱스와 정수를 이용해서 값을 추출할 수 있음 (리스트로 여러 개 가능)
		인덱스 = 값 구문을 통해 새로 할당할 수 있음
		loc, iloc를 통해 원하는 행만 불러올 수 있음
		loc를 통해 인덱싱하면 기본 인덱스와 다른 정수 인덱스를 기준으로 삼음 (인덱스가 정수가 아닐 시 사용 불가)
		*정수인 인덱스에서 음수가 없으면 인덱스 불가능한 문제 => 인덱스를 정수 아닌 것으로 설정하면 좋음 (슬라이싱에서는 정수지향적)
		iloc의 경우 정수 인덱스에서도 기본 인덱스를 기준으로 삼음
		조건으로 검색할 때는 iloc 사용 불가
		데이터프레임에서는 쉼표로 구분하면 행과 열 모두를 검색 가능
		여러 번 인덱싱할 경우 원하는 대로 결과가 나오지 않을 수 있음
	4) 연산
		시리즈, 데이터프레임끼리 더하면 합집합 (한쪽에라도 값이 없으면 NaN=null)
		인덱스 값이 한쪽에 없으면 다시 인덱싱됨
		(1) NaN 변환
			np.nan을 통해 특정 값을 NaN으로 정할 수 있음
			ad 메소드를 통해 빈 값이 한쪽에 있던 값으로 자동으로 채워짐
			fill_value를 지정할 수 있음
			NaN가 포함된 sum 연산에서 대상이 모두 NaN인 경우 결과는 0, NaN가 아닌 값이 있는 경우 결과는 NaN (skipna를 비활성화하면 이런 경우 모두 NaN 나옴)
		(2) 브로드캐스팅
			시리즈와 데이터프레임 사이 연산에서는 시리즈가 데이터프레임의 각 행에 적용됨
		(3) 최소 최대
			idxmin(최소), idxmax(최대) 메소드로 최소값, 최대값이 있는 열을 반환
		(4) 축적: 한 열에서 차례대로 하나하나 내려서 더함
		(5) describe로 통계 여러 개를 한 번에 볼 수 있음
	5) 기능 적용
		넘파이의 ufuncs (요소별 배열 메소드) 작동
		apply나 applymap을 통해 함수 적용 가능 (기본적 함수는 apply 없이도 가능)
		map은 시리즈에서 각 요소에 함수를 적용할 수 있음
	6) 정렬
		sort_index로 인덱스 사전순 정렬
		axis로 행인지 열인지, ascending으로 오름차순인지 내림차순인지 지정할 수 있음
		sort_values로 값 기준 정렬 (NaN은 끝으로 옮겨가는 게 기본 설정, na_position으로 변경 가능)
		데이터프레임에서는 기준으로 삼을 열을 지정할 수 있음
	7) 순위
		rank 메소드로 시리즈나 데이터프레임 안에 있는 값의 순위를 매길 수 있음 (동점일 경우 소수, 등장하는 순서대로 각각 다른 순위 할당할 수 있음)
	8) 고유 값
		unique 메소드로 중복된 값을 제외할 수 있음
		isin으로 값과 특정 데이터를 비교해 필터링 가능
		index.get_indexer은 중복이 있는 배열에 고유한 배열을 적용해 인덱스로 배열을 도출
	9) 세기
		value_counts()로 고유한 값 각각의 수를 셀 수 있음 (기본적으로 값 기준 내림차순)
		데이터프레임에서는 각 행을 하나의 값으로 보고 그 행과 같은 행이 몇 개인지 계산
		pd.value_counts로 값을 전부 각 열에서 나타나는 횟수로 바꿀 수 있음
